service: alg-serverless
frameworkVersion: '3'
useDotenv: true

custom:
  dynamodb:
    stages:
      - local
    start:
      port: 7000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      convertEmptyValues: true
  prune:
    automatic: true
    number: 1

provider:
  name: aws
  environment:
    STAGE: ${opt:stage, 'dev'}
    BACKEND_PUBLIC_KEY: ${env:BACKEND_PUBLIC_KEY}
    TABLE_NAME: ${env:TABLE_NAME}
    APIGW_ENDPOINT: ${env:APIGW_ENDPOINT}
  runtime: nodejs20.x
  deploymentMethod: direct
  deploymentBucket:
    name: ${env:OPS_BUCKET}
  region: eu-west-3
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"
        - Effect: Allow
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PartiQL*"
          Resource:
            - !Sub "arn:aws:dynamodb:eu-west-3:${AWS::AccountId}:table/${env:TABLE_NAME}"
functions:

  server:
    handler: src/handlers.globalHandler
    description: ${param:description}
    # events: To be configured by hand to support using lambda aliases for ops
    #   - websocket:
    #       route: $connect
    #   - websocket:
    #       route: $disconnect
    #   - websocket:
    #       route: $default
    #   - ALB

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-prune-plugin
